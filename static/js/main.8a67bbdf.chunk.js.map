{"version":3,"sources":["components/Logo/brain.png","components/Navigation/Navigation.js","components/FaceRecognition/FaceRecognition.js","components/Signin/Signin.js","components/Register/Register.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","FaceRecognition","imageUrl","box","id","alt","src","width","height","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Signin","htmlFor","type","name","value","Register","Logo","options","max","paddingTop","brain","ImageLinkForm","onInputChange","onButtonSubmit","onChange","app","Clarifai","App","apiKey","particlesOptions","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","console","log","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","route","show","this","params","Button","handleModal","Modal","onHide","Header","Body","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8a67bbdf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.6115d525.png\";","import React from 'react';\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n    if (isSignedIn) {\r\n        return (\r\n        <nav style ={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <p onClick={() => onRouteChange('signout')} className='f3 link din white underline pa3 pointer'>Sign Out</p>\r\n        </nav>\r\n        );\r\n    } else {\r\n        return (\r\n            <nav style ={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signin')} className='f3 link din white underline pa3 pointer'>Sign In</p>\r\n                <p onClick={() => onRouteChange('register')} className='f3 link din white underline pa3 pointer'>Register</p>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({imageUrl, box}) => {\r\n    return (\r\n        <div className='center ma'>\r\n            <div className='absolute mt5'>\r\n                <img id='inputimage' alt='' src={imageUrl} width='500px' height='auto'/>\r\n                <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst Signin = ({ onRouteChange }) => {\r\n    return (\r\n        <article className=\"br3 ba b--white-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 white-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                    <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\r\n                    </div>\r\n                    <div className=\"mv3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                        <input className=\"b pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\r\n                    </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input \r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b ph3 pv2 input-reset ba b--white bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\" value=\"Sign in\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                    <p onClick={() => onRouteChange('register')} className=\"f6 link dim white db pointer\">Register</p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Signin;","import React from 'react';\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n    return (\r\n        <article className=\"br3 ba b--white-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n            <main className=\"pa4 white-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                    <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" type=\"text\" name=\"name\"  id=\"name\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                        <input className=\"pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\" />\r\n                    </div>\r\n                    <div className=\"mv3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                        <input className=\"b pa2 input-reset ba bg-transparent hover-bg-white hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" />\r\n                    </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input \r\n                            onClick={() => onRouteChange('home')}\r\n                            className=\"b ph3 pv2 input-reset ba b--white bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\" value=\"Register\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport brain from './brain.png';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className= 'ma4 mt0 center'>\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 50 }} style={{ height: 150, width: 150 }} >\r\n                <div className=\"Tilt-inner pa3\">\r\n                    <img style={{paddingTop: '5px'}} alt=\"logo\" src={brain}/>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit} ) => {\r\n    return (\r\n        <div>\r\n            <p className='f2 washed-blue'>  \r\n                {'This Brain will detect faces in your picture'}\r\n            </p>\r\n            <div className = 'center'>\r\n                <div className = 'form center pa4 br3 shadow-5'>\r\n                    <input className = 'f4 pa2 w-70 center' type='tex' onChange={onInputChange}/>\r\n                    <button\r\n                        className = 'grow link ph3 pv2 dib white buttonS' \r\n                        onClick={onButtonSubmit}\r\n                    >detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm;","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Clarifai from 'clarifai';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport Signin from './components/Signin/Signin';\r\nimport Register from './components/Register/Register';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport './App.css';\r\nimport 'tachyons';\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: '90153ea43eb74fa5a9cd77b7ed7bb047'\r\n});\r\n\r\nconst particlesOptions = {\r\n  \"particles\": {\r\n    \"number\": {\r\n        \"value\": 160,\r\n        \"density\": {\r\n            \"enable\": false\r\n        }\r\n    },\r\n    \"size\": {\r\n        \"value\": 10,\r\n        \"random\": true\r\n    },\r\n    \"move\": {\r\n        \"direction\": \"bottom\",\r\n        \"out_mode\": \"out\"\r\n    },\r\n    \"line_linked\": {\r\n        \"enable\": false\r\n    }\r\n},\r\n\"interactivity\": {\r\n    \"events\": {\r\n        \"onclick\": {\r\n            \"enable\": true,\r\n            \"mode\": \"remove\"\r\n        }\r\n    },\r\n    \"modes\": {\r\n        \"remove\": {\r\n            \"particles_nb\": 10\r\n        }\r\n    }\r\n}\r\n    }\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: {},\r\n      route: 'signin',\r\n      isSignedIn: false,\r\n      show: false\r\n    }\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    console.log(box);\r\n    this.setState({box: box});\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input});\r\n    app.models\r\n      .predict(\r\n        Clarifai.FACE_DETECT_MODEL, \r\n        this.state.input)\r\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  onRouteChange = (route) => {\r\n    if (route === 'signout') {\r\n      this.setState({isSignedIn: false})\r\n    } else if (route=== 'home') {\r\n      this.setState({isSignedIn: true})\r\n    }\r\n    this.setState({route: route});\r\n  }\r\n  \r\n  handleModal() {\r\n    this.setState({show:!this.state.show});\r\n  }\r\n\r\n  render() {\r\n    const {isSignedIn, imageUrl, route, box} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Particles className = 'particles'\r\n        params={particlesOptions}/>\r\n\r\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}/>\r\n        {route === 'home'\r\n          ? <div>\r\n              <Logo /> \r\n              <ImageLinkForm \r\n                onInputChange={this.onInputChange}\r\n                onButtonSubmit={this.onButtonSubmit}\r\n              />\r\n              <FaceRecognition box={box} imageUrl={imageUrl} />\r\n              <div>\r\n                  <Button className=\"mt2\" onClick={() =>{this.handleModal()}}>About Me</Button>\r\n                  <Modal show={this.state.show} onHide={() =>this.handleModal()} >\r\n                    <Modal.Header>About Me</Modal.Header>\r\n                    <Modal.Body>\r\n                    <p>Hi, my name is Syimyk Zhantoroev.<br></br>\r\n                    I'm the Web Developer and student at AIU.</p>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                      <Button onClick={() =>{this.handleModal()}}>\r\n                        Close\r\n                      </Button>\r\n                    </Modal.Footer>\r\n                  </Modal>\r\n                </div>\r\n            </div>\r\n          : (\r\n            route === 'signin'\r\n            ? <Signin onRouteChange={this.onRouteChange} />\r\n            : <Register onRouteChange={this.onRouteChange} />\r\n            )\r\n        } \r\n      </div>\r\n    );\r\n  }\r\n} \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}